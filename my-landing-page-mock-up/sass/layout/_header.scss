.header {
    height: 85vh; 
    background-image: linear-gradient(
        to right bottom, 
        rgba($color-primary-light, 0.8), 
        rgba($color-primary-dark, 0.8)), 
        url(../img/hero-small.jpg);
    background-size: cover;
    background-position: top;
    position: relative;
    
    
    @supports (clip-path: polygon(0 0)) or (-webkit-clip-path: polygon(0 0)) {
        -webkit-clip-path: polygon(0 0, 100% 0, 100% 75vh, 0 100%);
        clip-path: polygon(0 0, 100% 0, 100% 75vh, 0 100%); /* Clips corners into a polygon(top left, top right, bottom right, bottom left) */    
        height: 95vh;
    }

    @media only screen and (min-resolution: 192dpi) and (min-width: 37.5em), 
           only screen and (-webkit-min-device-pixel-ratio: 2) and (min-width: 37.5em),
           only screen and (min-width: 125em) { 
        // if resolution is higher than 192dpi (2 DPR) AND greater than 600px --> convert to em: 600/16 = 37.5em
        // OR 
        // just greater than 2000px (doesn't need 192dpi) --> convert to em: 2000/16 = 125em
        // OR 
        // 2x screen ratio for safari (webkit) && 37.5em min width
        // then load this bigger image
        // ELSE load smaller hero-small.jpg
            background-image: linear-gradient(
                to right bottom, 
                rgba($color-primary-light, 0.8), 
                rgba($color-primary-dark, 0.8)), 
                url(../img/hero.jpg);
    }

    @include respond(phone) {
        -webkit-clip-path: polygon(0 0, 100% 0, 100% 85vh, 0 100%);
        clip-path: polygon(0 0, 100% 0, 100% 85vh, 0 100%); 
    }
    &__logo-box {
        position: absolute;
        top: 4rem; /* These pxs are counted from the parent reference, thus you must use position: relative in the parent (in this case is the header) */
        left: 4rem;
    }

    &__logo {
        height: 3.5rem; /* once you specify the height, the width is automatically scaled with it */
    }
    
    &__text-box {
        position: absolute;
        top: 40%;
        left: 50%; /* shifts 50% of the element using the top left corner of the element as a starting point */
        transform: translate(-50%, -50%); /* creates a new starting point at the center of the element so that it is shifted properly to the center */
        text-align: center;
    }
}